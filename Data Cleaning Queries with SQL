#1 Projects
(This is a rundown of my SQL Projects and other Data Analytics Projects)

--Cleaning Data in SQL Queries
--*/


Select *
From [NashVille HousingDataCleaning]

--------------------------------------------------------------------------------------------------------------------------

-- Standardize Date Format

Select SaleDate
From [NashVille HousingDataCleaning]

Select SaleDate, CONVERT(Date,SaleDate) 
From [NashVille HousingDataCleaning]

-- If it doesn't Update properly

ALter Table [NashVille HousingDataCleaning]
Add SaleDateConverted DATE


Update [NashVille HousingDataCleaning]
SET SaleDateConverted = CONVERT(Date,SaleDate)

Select SaleDateConverted, CONVERT(Date,SaleDate) 
From [NashVille HousingDataCleaning]

Select SaleDateConverted
From [NashVille HousingDataCleaning]

--COOL 1ST DATA CLEANED
 --------------------------------------------------------------------------------------------------------------------------

-- Populate Property Address data

Select PropertyAddress
From [NashVille HousingDataCleaning]

Select PropertyAddress
From [NashVille HousingDataCleaning]
Where PropertyAddress is null


Select *
From [NashVille HousingDataCleaning]
Where PropertyAddress is null

Select *
From [NashVille HousingDataCleaning]
order by ParcelID

Select *
From [Nashville HousingDataCleaning] a
Join [NashVille HousingDataCleaning] b
     on a.ParcelID = b.ParcelID
	 and a.[UniqueID ] <> b.[UniqueID ]
	 where a.PropertyAddress is null

Select a.ParcelID, a.PropertyAddress, b.parcelID, b.PropertyAddress
From [Nashville HousingDataCleaning] a
Join [NashVille HousingDataCleaning] b
     on a.ParcelID = b.ParcelID
	 and a.UniqueID <> b.[UniqueID ]
	 where a.PropertyAddress is null

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
From [NashVille HousingDataCleaning] a
JOIN [NashVille HousingDataCleaning] b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null


Update a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
From [NashVille HousingDataCleaning] a
JOIN [NashVille HousingDataCleaning] b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
From [NashVille HousingDataCleaning] a
JOIN [NashVille HousingDataCleaning] b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null

--COOL 2nd data Cleaned

--------------------------------------------------------------------------------------------------------------------------

-- Breaking out Address into Individual Columns (Address, City, State)


Select PropertyAddress
From [NashVille HousingDataCleaning]
--Where PropertyAddress is null
--order by ParcelID

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as Address

From [NashVille HousingDataCleaning]


ALTER TABLE [NashVille HousingDataCleaning]
Add PropertySplitAddress Nvarchar(255);

Update [NashVille HousingDataCleaning]
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )


ALTER TABLE [NashVille HousingDataCleaning]
Add PropertySplitCity Nvarchar(255);

Update [NashVille HousingDataCleaning]
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))




Select *
From [NashVille HousingDataCleaning]





Select OwnerAddress
From [NashVille HousingDataCleaning]


Select
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)
From [NashVille HousingDataCleaning]



ALTER TABLE [NashVille HousingDataCleaning]
Add OwnerSplitAddress Nvarchar(255);

Update [NashVille HousingDataCleaning]
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)


ALTER TABLE [NashVille HousingDataCleaning]
Add OwnerSplitCity Nvarchar(255);

Update [NashVille HousingDataCleaning]
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)



ALTER TABLE [NashVille HousingDataCleaning]
Add OwnerSplitState Nvarchar(255);

Update [NashVille HousingDataCleaning]
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)



Select *
From [NashVille HousingDataCleaning]




--------------------------------------------------------------------------------------------------------------------------


-- Change Y and N to Yes and No in "Sold as Vacant" field


Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From [NashVille HousingDataCleaning]
Group by SoldAsVacant
order by 2




Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
From [NashVille HousingDataCleaning]


Update [NashVille HousingDataCleaning]
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END






-----------------------------------------------------------------------------------------------------------------------------------------------------------

-- Remove Duplicates

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

From [NashVille HousingDataCleaning]
--order by ParcelID
)
Select *
From RowNumCTE
Where row_num > 1
Order by PropertyAddress



Select *
From [NashVille HousingDataCleaning]




---------------------------------------------------------------------------------------------------------

-- Delete Unused Columns



Select *
From [NashVille HousingDataCleaning]


ALTER TABLE [NashVille HousingDataCleaning]
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate

